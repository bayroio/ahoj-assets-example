{"ast":null,"code":"// pages/assetledger.js\nimport Layout from '../components/MyLayout';\nimport Link from 'next/link';\nimport useSWR from 'swr';\nimport fetch from 'isomorphic-unfetch';\n\nfunction fetcher(url) {\n  return fetch(url).then(r => r.json());\n}\n\nexport default function AssetLedger() {\n  var _data, _data2, _data3;\n\n  // The following line has optional chaining, added in Next.js v9.1.5,\n  // is the same as `data && data.name`\n  const name = (_data = data) === null || _data === void 0 ? void 0 : _data.name;\n  let symbol = (_data2 = data) === null || _data2 === void 0 ? void 0 : _data2.symbol;\n  let address = (_data3 = data) === null || _data3 === void 0 ? void 0 : _data3.address;\n  if (!data) name = 'Loading...';\n  if (error) name = 'Failed to fetch the quote.';\n}\n/*const AssetLedger = props => (\n  <Layout>\n    <h1>Collection of Asset</h1> \n    <p>Think of a Collection of Asset as a box of toys and each asset as a toy.</p>\n    <br /><hr /><br />\n    <Link href=\"/newcollection\">\n      <a>Create a New Collection...</a>\n    </Link>\n    <br /><hr /><br />\n    <ul>\n      {props.ledgers.map(ledger => (\n        <li key={ledger.symbol}>\n        <Link href=\"/p/[id]\" as={`/p/${ledger.symbol}`}>\n          <a>{ledger.name}</a>\n          <a>{ledger.symbol}</a>\n          <a>{ledger.address}</a>\n        </Link>\n      </li>\n      ))} \n    </ul>\n  </Layout>\n);\n\nAssetLedger.getInitialProps = async function() {\n  const { data, error } = useSWR('/api/ledgers', fetch);\n  //const res = await fetch('./pages/api/ledgers.json');\n  //const data = await res.json();\n\n  console.log(`Show data fetched. Count: ${data.length}`);\n\n  return {\n    ledgers: data.map(ledger => ledger)\n  };\n};*/\n//export default AssetLedger;","map":{"version":3,"sources":["/Users/edgarherrador/Documents/Github/ahoj-assets/pages/assetledger.js"],"names":["Layout","Link","useSWR","fetch","fetcher","url","then","r","json","AssetLedger","name","data","symbol","address","error"],"mappings":"AAAA;AAEA,OAAOA,MAAP,MAAmB,wBAAnB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,MAAP,MAAmB,KAAnB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;;AAEA,SAASC,OAAT,CAAiBC,GAAjB,EAAsB;AACpB,SAAOF,KAAK,CAACE,GAAD,CAAL,CAAWC,IAAX,CAAgBC,CAAC,IAAIA,CAAC,CAACC,IAAF,EAArB,CAAP;AACD;;AAED,eAAe,SAASC,WAAT,GAAuB;AAAA;;AACpC;AACA;AACA,QAAMC,IAAI,YAAGC,IAAH,0CAAG,MAAMD,IAAnB;AACA,MAAIE,MAAM,aAAGD,IAAH,2CAAG,OAAMC,MAAnB;AACA,MAAIC,OAAO,aAAGF,IAAH,2CAAG,OAAME,OAApB;AAEA,MAAI,CAACF,IAAL,EAAWD,IAAI,GAAG,YAAP;AACX,MAAII,KAAJ,EAAWJ,IAAI,GAAG,4BAAP;AAEZ;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmCA","sourcesContent":["// pages/assetledger.js\n\nimport Layout from '../components/MyLayout';\nimport Link from 'next/link';\nimport useSWR from 'swr';\nimport fetch from 'isomorphic-unfetch';\n\nfunction fetcher(url) {\n  return fetch(url).then(r => r.json());\n}\n\nexport default function AssetLedger() {\n  // The following line has optional chaining, added in Next.js v9.1.5,\n  // is the same as `data && data.name`\n  const name = data?.name;\n  let symbol = data?.symbol;\n  let address = data?.address;\n\n  if (!data) name = 'Loading...';\n  if (error) name = 'Failed to fetch the quote.';\n\n}\n\n/*const AssetLedger = props => (\n  <Layout>\n    <h1>Collection of Asset</h1> \n    <p>Think of a Collection of Asset as a box of toys and each asset as a toy.</p>\n    <br /><hr /><br />\n    <Link href=\"/newcollection\">\n      <a>Create a New Collection...</a>\n    </Link>\n    <br /><hr /><br />\n    <ul>\n      {props.ledgers.map(ledger => (\n        <li key={ledger.symbol}>\n        <Link href=\"/p/[id]\" as={`/p/${ledger.symbol}`}>\n          <a>{ledger.name}</a>\n          <a>{ledger.symbol}</a>\n          <a>{ledger.address}</a>\n        </Link>\n      </li>\n      ))} \n    </ul>\n  </Layout>\n);\n\nAssetLedger.getInitialProps = async function() {\n  const { data, error } = useSWR('/api/ledgers', fetch);\n  //const res = await fetch('./pages/api/ledgers.json');\n  //const data = await res.json();\n\n  console.log(`Show data fetched. Count: ${data.length}`);\n\n  return {\n    ledgers: data.map(ledger => ledger)\n  };\n};*/\n\n//export default AssetLedger;"]},"metadata":{},"sourceType":"module"}