{"ast":null,"code":"var _jsxFileName = \"/Users/edgarherrador/Documents/Github/ahoj-assets/pages/assetledger.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n// pages/assetledger.js\nimport Layout from '../components/MyLayout';\nimport Link from 'next/link';\nimport fetch from 'unfetch'; //import useSWR from 'swr';\n//import fetch from 'isomorphic-unfetch'\n//const API_URL = 'https://api.github.com'\n\nconst API_URL = '';\n\nfunction fetcher(path) {\n  return fetch(API_URL + path).then(r => r.json());\n}\n\nexport default function AssetLedger({\n  ledgers\n}) {\n  //const { data, error } = useSWR('/api/ledgers', fetcher);\n  //const { data, error } = useSWR('/repos/zeit/next.js', fetcher);\n  //const { data, error } = useSWR('/api/next', fetcher);\n  if (error) return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 21\n    }\n  }, \"failed to load\");\n  if (!data) return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 21\n    }\n  }, \"loading...\"); //return <div>Data: {data.stargazers_count}</div>\n\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 10\n    }\n  }, \"Data: $\", ledgers);\n  /*console.log(`Show data fetched: ${data}`);\n  console.log(data);\n  console.log(data.map(ledgar => {ledger.symbol}));\n    return (\n    <Layout>\n      <h1>Collection of Asset</h1> \n      <p>Think of a Collection of Asset as a box of toys and each asset as a toy.</p>\n      <br /><hr /><br />\n      <Link href=\"/newcollection\">\n        <a>Create a New Collection...</a>\n      </Link>\n      <br /><hr /><br />\n      \n    </Layout>\n  )*/\n}\n\nAssetLedger.getInitialProps = async () => {\n  var misCabeceras = new Headers();\n  var miInit = {\n    method: 'GET',\n    headers: misCabeceras,\n    mode: 'no-cors',\n    cache: 'default'\n  };\n  const res = await fetch('https://ledgerapi-272423.appspot.com/', miInit);\n  const json = await res.json();\n  return {\n    ledgers: json\n  }; //const { data, error } = useSWR('/api/next.js', fetcher);\n  //return { stars: data.stargazers_count }\n};\n/*\n<ul>\n        {data.map(ledger => (\n          <li key={ledger.symbol}>\n          <Link href=\"/p/[id]\" as={`/p/${ledger.symbol}`}>\n            <a>{ledger.name}</a>\n            <a>{ledger.symbol}</a>\n            <a>{ledger.address}</a>\n          </Link>\n        </li>\n        ))} \n      </ul>\n*/\n\n/*const AssetLedger = props => (\n  <Layout>\n    <h1>Collection of Asset</h1> \n    <p>Think of a Collection of Asset as a box of toys and each asset as a toy.</p>\n    <br /><hr /><br />\n    <Link href=\"/newcollection\">\n      <a>Create a New Collection...</a>\n    </Link>\n    <br /><hr /><br />\n    <ul>\n      {props.ledgers.map(ledger => (\n        <li key={ledger.symbol}>\n        <Link href=\"/p/[id]\" as={`/p/${ledger.symbol}`}>\n          <a>{ledger.name}</a>\n          <a>{ledger.symbol}</a>\n          <a>{ledger.address}</a>\n        </Link>\n      </li>\n      ))} \n    </ul>\n  </Layout>\n);\n\nAssetLedger.getInitialProps = async function() {\n  const { data, error } = useSWR('/api/ledgers', fetch);\n  //const res = await fetch('./pages/api/ledgers.json');\n  //const data = await res.json();\n\n  console.log(`Show data fetched. Count: ${data.length}`);\n\n  return {\n    ledgers: data.map(ledger => ledger)\n  };\n};*/\n//export default AssetLedger;","map":{"version":3,"sources":["/Users/edgarherrador/Documents/Github/ahoj-assets/pages/assetledger.js"],"names":["Layout","Link","fetch","API_URL","fetcher","path","then","r","json","AssetLedger","ledgers","error","data","getInitialProps","misCabeceras","Headers","miInit","method","headers","mode","cache","res"],"mappings":";;;AAAA;AAEA,OAAOA,MAAP,MAAmB,wBAAnB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,KAAP,MAAkB,SAAlB,C,CACA;AACA;AAEA;;AACA,MAAMC,OAAO,GAAG,EAAhB;;AACA,SAASC,OAAT,CAAiBC,IAAjB,EAAuB;AACrB,SAAOH,KAAK,CAACC,OAAO,GAAGE,IAAX,CAAL,CAAsBC,IAAtB,CAA2BC,CAAC,IAAIA,CAAC,CAACC,IAAF,EAAhC,CAAP;AACD;;AAED,eAAe,SAASC,WAAT,CAAqB;AAACC,EAAAA;AAAD,CAArB,EAAgC;AAC7C;AACA;AACA;AAEA,MAAIC,KAAJ,EAAW,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAP;AACX,MAAI,CAACC,IAAL,EAAW,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAP,CANkC,CAQ7C;;AACA,SAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAaF,OAAb,CAAP;AAEA;;;;;;;;;;;;;;;AAiBD;;AAEDD,WAAW,CAACI,eAAZ,GAA8B,YAAY;AACxC,MAAIC,YAAY,GAAG,IAAIC,OAAJ,EAAnB;AAEA,MAAIC,MAAM,GAAG;AAAEC,IAAAA,MAAM,EAAE,KAAV;AACAC,IAAAA,OAAO,EAAEJ,YADT;AAEAK,IAAAA,IAAI,EAAE,SAFN;AAGAC,IAAAA,KAAK,EAAE;AAHP,GAAb;AAKA,QAAMC,GAAG,GAAG,MAAMnB,KAAK,CAAC,uCAAD,EAA0Cc,MAA1C,CAAvB;AACA,QAAMR,IAAI,GAAG,MAAMa,GAAG,CAACb,IAAJ,EAAnB;AACA,SAAO;AAAEE,IAAAA,OAAO,EAAEF;AAAX,GAAP,CAVwC,CAYxC;AACA;AACD,CAdD;AAiBA;;;;;;;;;;;;;;AAcA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmCA","sourcesContent":["// pages/assetledger.js\n\nimport Layout from '../components/MyLayout';\nimport Link from 'next/link';\nimport fetch from 'unfetch';\n//import useSWR from 'swr';\n//import fetch from 'isomorphic-unfetch'\n\n//const API_URL = 'https://api.github.com'\nconst API_URL = ''\nfunction fetcher(path) {\n  return fetch(API_URL + path).then(r => r.json());\n}\n\nexport default function AssetLedger({ledgers}) {\n  //const { data, error } = useSWR('/api/ledgers', fetcher);\n  //const { data, error } = useSWR('/repos/zeit/next.js', fetcher);\n  //const { data, error } = useSWR('/api/next', fetcher);\n \n  if (error) return <div>failed to load</div>\n  if (!data) return <div>loading...</div>\n\n  //return <div>Data: {data.stargazers_count}</div>\n  return <div>Data: ${ledgers}</div>\n\n  /*console.log(`Show data fetched: ${data}`);\n  console.log(data);\n  console.log(data.map(ledgar => {ledger.symbol}));\n\n\n  return (\n    <Layout>\n      <h1>Collection of Asset</h1> \n      <p>Think of a Collection of Asset as a box of toys and each asset as a toy.</p>\n      <br /><hr /><br />\n      <Link href=\"/newcollection\">\n        <a>Create a New Collection...</a>\n      </Link>\n      <br /><hr /><br />\n      \n    </Layout>\n  )*/\n}\n\nAssetLedger.getInitialProps = async () => {\n  var misCabeceras = new Headers();\n\n  var miInit = { method: 'GET',\n               headers: misCabeceras,\n               mode: 'no-cors',\n               cache: 'default' };\n  \n  const res = await fetch('https://ledgerapi-272423.appspot.com/', miInit)\n  const json = await res.json()\n  return { ledgers: json }\n\n  //const { data, error } = useSWR('/api/next.js', fetcher);\n  //return { stars: data.stargazers_count }\n}\n\n\n/*\n<ul>\n        {data.map(ledger => (\n          <li key={ledger.symbol}>\n          <Link href=\"/p/[id]\" as={`/p/${ledger.symbol}`}>\n            <a>{ledger.name}</a>\n            <a>{ledger.symbol}</a>\n            <a>{ledger.address}</a>\n          </Link>\n        </li>\n        ))} \n      </ul>\n*/\n\n/*const AssetLedger = props => (\n  <Layout>\n    <h1>Collection of Asset</h1> \n    <p>Think of a Collection of Asset as a box of toys and each asset as a toy.</p>\n    <br /><hr /><br />\n    <Link href=\"/newcollection\">\n      <a>Create a New Collection...</a>\n    </Link>\n    <br /><hr /><br />\n    <ul>\n      {props.ledgers.map(ledger => (\n        <li key={ledger.symbol}>\n        <Link href=\"/p/[id]\" as={`/p/${ledger.symbol}`}>\n          <a>{ledger.name}</a>\n          <a>{ledger.symbol}</a>\n          <a>{ledger.address}</a>\n        </Link>\n      </li>\n      ))} \n    </ul>\n  </Layout>\n);\n\nAssetLedger.getInitialProps = async function() {\n  const { data, error } = useSWR('/api/ledgers', fetch);\n  //const res = await fetch('./pages/api/ledgers.json');\n  //const data = await res.json();\n\n  console.log(`Show data fetched. Count: ${data.length}`);\n\n  return {\n    ledgers: data.map(ledger => ledger)\n  };\n};*/\n\n//export default AssetLedger;"]},"metadata":{},"sourceType":"module"}