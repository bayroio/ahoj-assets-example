{"ast":null,"code":"var _jsxFileName = \"/Users/edgarherrador/Documents/Github/ahoj-assets/pages/assetledger.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n// pages/assetledger.js\nimport Layout from '../components/MyLayout';\nimport Link from 'next/link';\nimport useSWR from 'swr';\n\nfunction fetcher(url) {\n  return fetch(url).then(function (r) {\n    return r.json();\n  });\n}\n\nexport default function AssetLedger() {\n  var _this = this;\n\n  var _useSWR = useSWR('/api/ledgers', fetcher),\n      data = _useSWR.data,\n      error = _useSWR.error; // The following line has optional chaining, added in Next.js v9.1.5,\n  // is the same as `data && data.name`\n  //const name = data?.name;\n  //let symbol = data?.symbol;\n  //let address = data?.address;\n  //if (!data) name = 'Loading...';\n  //if (error) name = 'Failed to fetch the quote.';\n\n\n  console.log(\"Show data fetched: \".concat(data));\n  console.log(data);\n  var ledgerArray = []; // Generate an array for each asset to create the corresponding ArtPiece components\n\n  for (var i = 0; i < data; i++) {\n    ledgerArray.push(i);\n  }\n\n  ledgerArray = ledgerArray.map(function (ledger) {\n    return __jsx(\"li\", {\n      key: ledger.symbol,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 5\n      }\n    }, __jsx(Link, {\n      href: \"/p/[id]\",\n      as: \"/p/\".concat(ledger.symbol),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 11\n      }\n    }, __jsx(\"a\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 13\n      }\n    }, ledger.name), __jsx(\"a\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 13\n      }\n    }, ledger.symbol), __jsx(\"a\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 13\n      }\n    }, ledger.address)));\n  });\n  return __jsx(Layout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 5\n    }\n  }, __jsx(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }\n  }, \"Collection of Asset\"), __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }\n  }, \"Think of a Collection of Asset as a box of toys and each asset as a toy.\"), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }\n  }), __jsx(\"hr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }\n  }), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 19\n    }\n  }), __jsx(Link, {\n    href: \"/newcollection\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }\n  }, __jsx(\"a\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }\n  }, \"Create a New Collection...\")), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }\n  }), __jsx(\"hr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }\n  }), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 19\n    }\n  }), __jsx(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }\n  }, \"ledgerArray.map(ledger => (\", __jsx(\"li\", {\n    key: ledger.symbol,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }\n  }, __jsx(Link, {\n    href: \"/p/[id]\",\n    as: \"/p/\".concat(ledger.symbol),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 11\n    }\n  }, __jsx(\"a\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }\n  }, ledger.name), __jsx(\"a\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }\n  }, ledger.symbol), __jsx(\"a\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }\n  }, ledger.address))), \"))\"));\n}\n/*\n<ul>\n        {data.map(ledger => (\n          <li key={ledger.symbol}>\n          <Link href=\"/p/[id]\" as={`/p/${ledger.symbol}`}>\n            <a>{ledger.name}</a>\n            <a>{ledger.symbol}</a>\n            <a>{ledger.address}</a>\n          </Link>\n        </li>\n        ))} \n      </ul>\n*/\n\n/*const AssetLedger = props => (\n  <Layout>\n    <h1>Collection of Asset</h1> \n    <p>Think of a Collection of Asset as a box of toys and each asset as a toy.</p>\n    <br /><hr /><br />\n    <Link href=\"/newcollection\">\n      <a>Create a New Collection...</a>\n    </Link>\n    <br /><hr /><br />\n    <ul>\n      {props.ledgers.map(ledger => (\n        <li key={ledger.symbol}>\n        <Link href=\"/p/[id]\" as={`/p/${ledger.symbol}`}>\n          <a>{ledger.name}</a>\n          <a>{ledger.symbol}</a>\n          <a>{ledger.address}</a>\n        </Link>\n      </li>\n      ))} \n    </ul>\n  </Layout>\n);\n\nAssetLedger.getInitialProps = async function() {\n  const { data, error } = useSWR('/api/ledgers', fetch);\n  //const res = await fetch('./pages/api/ledgers.json');\n  //const data = await res.json();\n\n  console.log(`Show data fetched. Count: ${data.length}`);\n\n  return {\n    ledgers: data.map(ledger => ledger)\n  };\n};*/\n//export default AssetLedger;","map":{"version":3,"sources":["/Users/edgarherrador/Documents/Github/ahoj-assets/pages/assetledger.js"],"names":["Layout","Link","useSWR","fetcher","url","fetch","then","r","json","AssetLedger","data","error","console","log","ledgerArray","i","push","map","ledger","symbol","name","address"],"mappings":"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","sourcesContent":["// pages/assetledger.js\n\nimport Layout from '../components/MyLayout';\nimport Link from 'next/link';\nimport useSWR from 'swr';\n\nfunction fetcher(url) {\n  return fetch(url).then(r => r.json());\n}\n\nexport default function AssetLedger() {\n  let { data, error } = useSWR('/api/ledgers', fetcher);\n  // The following line has optional chaining, added in Next.js v9.1.5,\n  // is the same as `data && data.name`\n  //const name = data?.name;\n  //let symbol = data?.symbol;\n  //let address = data?.address;\n\n  //if (!data) name = 'Loading...';\n  //if (error) name = 'Failed to fetch the quote.';\n\n  console.log(`Show data fetched: ${data}`);\n  console.log(data);\n\n  let ledgerArray = []\n        // Generate an array for each asset to create the corresponding ArtPiece components\n  for(let i = 0; i < data; i++) {\n    ledgerArray.push(i)\n  }\n  ledgerArray = ledgerArray.map(ledger => (\n    <li key={ledger.symbol}>\n          <Link href=\"/p/[id]\" as={`/p/${ledger.symbol}`}>\n            <a>{ledger.name}</a>\n            <a>{ledger.symbol}</a>\n            <a>{ledger.address}</a>\n          </Link>\n        </li>\n  ))\n\n  return (\n    <Layout>\n      <h1>Collection of Asset</h1> \n      <p>Think of a Collection of Asset as a box of toys and each asset as a toy.</p>\n      <br /><hr /><br />\n      <Link href=\"/newcollection\">\n        <a>Create a New Collection...</a>\n      </Link>\n      <br /><hr /><br />\n      <ul>\n        ledgerArray.map(ledger => (\n        <li key={ledger.symbol}>\n          <Link href=\"/p/[id]\" as={`/p/${ledger.symbol}`}>\n            <a>{ledger.name}</a>\n            <a>{ledger.symbol}</a>\n            <a>{ledger.address}</a>\n          </Link>\n        </li>\n  ))\n      </ul>\n    </Layout>\n  )\n}\n\n/*\n<ul>\n        {data.map(ledger => (\n          <li key={ledger.symbol}>\n          <Link href=\"/p/[id]\" as={`/p/${ledger.symbol}`}>\n            <a>{ledger.name}</a>\n            <a>{ledger.symbol}</a>\n            <a>{ledger.address}</a>\n          </Link>\n        </li>\n        ))} \n      </ul>\n*/\n\n/*const AssetLedger = props => (\n  <Layout>\n    <h1>Collection of Asset</h1> \n    <p>Think of a Collection of Asset as a box of toys and each asset as a toy.</p>\n    <br /><hr /><br />\n    <Link href=\"/newcollection\">\n      <a>Create a New Collection...</a>\n    </Link>\n    <br /><hr /><br />\n    <ul>\n      {props.ledgers.map(ledger => (\n        <li key={ledger.symbol}>\n        <Link href=\"/p/[id]\" as={`/p/${ledger.symbol}`}>\n          <a>{ledger.name}</a>\n          <a>{ledger.symbol}</a>\n          <a>{ledger.address}</a>\n        </Link>\n      </li>\n      ))} \n    </ul>\n  </Layout>\n);\n\nAssetLedger.getInitialProps = async function() {\n  const { data, error } = useSWR('/api/ledgers', fetch);\n  //const res = await fetch('./pages/api/ledgers.json');\n  //const data = await res.json();\n\n  console.log(`Show data fetched. Count: ${data.length}`);\n\n  return {\n    ledgers: data.map(ledger => ledger)\n  };\n};*/\n\n//export default AssetLedger;"]},"metadata":{},"sourceType":"module"}