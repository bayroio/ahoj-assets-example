{"ast":null,"code":"var _jsxFileName = \"/Users/edgarherrador/Documents/Github/ahoj-assets/pages/assetledger.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n// pages/assetledger.js\nimport Layout from '../components/MyLayout';\nimport Link from 'next/link';\nimport fetch from 'unfetch';\nimport useSWR from 'swr'; //import fetch from 'isomorphic-unfetch'\n//const API_URL = 'https://api.github.com'\n\nvar API_URL = '';\n\nfunction fetcher(path) {\n  return fetch(API_URL + path).then(function (r) {\n    return r.json();\n  });\n}\n\nexport default function AssetLedger() {\n  var _useSWR = useSWR('/api/ledgers', fetcher),\n      data = _useSWR.data,\n      error = _useSWR.error; //const { data, error } = useSWR('/repos/zeit/next.js', fetcher);\n  //const { data, error } = useSWR('/api/next', fetcher);\n\n\n  if (error) return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 21\n    }\n  }, \"failed to load\");\n  if (!data) return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 21\n    }\n  }, \"loading...\"); //return <div>Data: {data.stargazers_count}</div>\n\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 10\n    }\n  }, \"Data: $\", data);\n  /*console.log(`Show data fetched: ${data}`);\n  console.log(data);\n  console.log(data.map(ledgar => {ledger.symbol}));\n    return (\n    <Layout>\n      <h1>Collection of Asset</h1> \n      <p>Think of a Collection of Asset as a box of toys and each asset as a toy.</p>\n      <br /><hr /><br />\n      <Link href=\"/newcollection\">\n        <a>Create a New Collection...</a>\n      </Link>\n      <br /><hr /><br />\n      \n    </Layout>\n  )*/\n}\n/*AssetLedger.getInitialProps = async () => {\n  const res = await fetch('https://api.github.com/repos/zeit/next.js')\n  const json = await res.json()\n  return { stars: json.stargazers_count }\n\n  //const { data, error } = useSWR('/api/next.js', fetcher);\n  //return { stars: data.stargazers_count }\n}*/\n\n/*\n<ul>\n        {data.map(ledger => (\n          <li key={ledger.symbol}>\n          <Link href=\"/p/[id]\" as={`/p/${ledger.symbol}`}>\n            <a>{ledger.name}</a>\n            <a>{ledger.symbol}</a>\n            <a>{ledger.address}</a>\n          </Link>\n        </li>\n        ))} \n      </ul>\n*/\n\n/*const AssetLedger = props => (\n  <Layout>\n    <h1>Collection of Asset</h1> \n    <p>Think of a Collection of Asset as a box of toys and each asset as a toy.</p>\n    <br /><hr /><br />\n    <Link href=\"/newcollection\">\n      <a>Create a New Collection...</a>\n    </Link>\n    <br /><hr /><br />\n    <ul>\n      {props.ledgers.map(ledger => (\n        <li key={ledger.symbol}>\n        <Link href=\"/p/[id]\" as={`/p/${ledger.symbol}`}>\n          <a>{ledger.name}</a>\n          <a>{ledger.symbol}</a>\n          <a>{ledger.address}</a>\n        </Link>\n      </li>\n      ))} \n    </ul>\n  </Layout>\n);\n\nAssetLedger.getInitialProps = async function() {\n  const { data, error } = useSWR('/api/ledgers', fetch);\n  //const res = await fetch('./pages/api/ledgers.json');\n  //const data = await res.json();\n\n  console.log(`Show data fetched. Count: ${data.length}`);\n\n  return {\n    ledgers: data.map(ledger => ledger)\n  };\n};*/\n//export default AssetLedger;","map":{"version":3,"sources":["/Users/edgarherrador/Documents/Github/ahoj-assets/pages/assetledger.js"],"names":["Layout","Link","fetch","useSWR","API_URL","fetcher","path","then","r","json","AssetLedger","data","error"],"mappings":";;;AAAA;AAEA,OAAOA,MAAP,MAAmB,wBAAnB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAOC,MAAP,MAAmB,KAAnB,C,CACA;AAEA;;AACA,IAAMC,OAAO,GAAG,EAAhB;;AACA,SAASC,OAAT,CAAiBC,IAAjB,EAAuB;AACrB,SAAOJ,KAAK,CAACE,OAAO,GAAGE,IAAX,CAAL,CAAsBC,IAAtB,CAA2B,UAAAC,CAAC;AAAA,WAAIA,CAAC,CAACC,IAAF,EAAJ;AAAA,GAA5B,CAAP;AACD;;AAED,eAAe,SAASC,WAAT,GAAuB;AAAA,gBACZP,MAAM,CAAC,cAAD,EAAiBE,OAAjB,CADM;AAAA,MAC5BM,IAD4B,WAC5BA,IAD4B;AAAA,MACtBC,KADsB,WACtBA,KADsB,EAEpC;AACA;;;AAEA,MAAIA,KAAJ,EAAW,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAP;AACX,MAAI,CAACD,IAAL,EAAW,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAP,CANyB,CAQpC;;AACA,SAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAaA,IAAb,CAAP;AAEA;;;;;;;;;;;;;;;AAiBD;AAED;;;;;;;;;AAUA;;;;;;;;;;;;;;AAcA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmCA","sourcesContent":["// pages/assetledger.js\n\nimport Layout from '../components/MyLayout';\nimport Link from 'next/link';\nimport fetch from 'unfetch';\nimport useSWR from 'swr';\n//import fetch from 'isomorphic-unfetch'\n\n//const API_URL = 'https://api.github.com'\nconst API_URL = ''\nfunction fetcher(path) {\n  return fetch(API_URL + path).then(r => r.json());\n}\n\nexport default function AssetLedger() {\n  const { data, error } = useSWR('/api/ledgers', fetcher);\n  //const { data, error } = useSWR('/repos/zeit/next.js', fetcher);\n  //const { data, error } = useSWR('/api/next', fetcher);\n \n  if (error) return <div>failed to load</div>\n  if (!data) return <div>loading...</div>\n\n  //return <div>Data: {data.stargazers_count}</div>\n  return <div>Data: ${data}</div>\n\n  /*console.log(`Show data fetched: ${data}`);\n  console.log(data);\n  console.log(data.map(ledgar => {ledger.symbol}));\n\n\n  return (\n    <Layout>\n      <h1>Collection of Asset</h1> \n      <p>Think of a Collection of Asset as a box of toys and each asset as a toy.</p>\n      <br /><hr /><br />\n      <Link href=\"/newcollection\">\n        <a>Create a New Collection...</a>\n      </Link>\n      <br /><hr /><br />\n      \n    </Layout>\n  )*/\n}\n\n/*AssetLedger.getInitialProps = async () => {\n  const res = await fetch('https://api.github.com/repos/zeit/next.js')\n  const json = await res.json()\n  return { stars: json.stargazers_count }\n\n  //const { data, error } = useSWR('/api/next.js', fetcher);\n  //return { stars: data.stargazers_count }\n}*/\n\n\n/*\n<ul>\n        {data.map(ledger => (\n          <li key={ledger.symbol}>\n          <Link href=\"/p/[id]\" as={`/p/${ledger.symbol}`}>\n            <a>{ledger.name}</a>\n            <a>{ledger.symbol}</a>\n            <a>{ledger.address}</a>\n          </Link>\n        </li>\n        ))} \n      </ul>\n*/\n\n/*const AssetLedger = props => (\n  <Layout>\n    <h1>Collection of Asset</h1> \n    <p>Think of a Collection of Asset as a box of toys and each asset as a toy.</p>\n    <br /><hr /><br />\n    <Link href=\"/newcollection\">\n      <a>Create a New Collection...</a>\n    </Link>\n    <br /><hr /><br />\n    <ul>\n      {props.ledgers.map(ledger => (\n        <li key={ledger.symbol}>\n        <Link href=\"/p/[id]\" as={`/p/${ledger.symbol}`}>\n          <a>{ledger.name}</a>\n          <a>{ledger.symbol}</a>\n          <a>{ledger.address}</a>\n        </Link>\n      </li>\n      ))} \n    </ul>\n  </Layout>\n);\n\nAssetLedger.getInitialProps = async function() {\n  const { data, error } = useSWR('/api/ledgers', fetch);\n  //const res = await fetch('./pages/api/ledgers.json');\n  //const data = await res.json();\n\n  console.log(`Show data fetched. Count: ${data.length}`);\n\n  return {\n    ledgers: data.map(ledger => ledger)\n  };\n};*/\n\n//export default AssetLedger;"]},"metadata":{},"sourceType":"module"}